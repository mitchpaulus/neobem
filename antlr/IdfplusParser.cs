//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idfplus.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IdfplusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, FUNCTION_NAME=7, OBJECT=8, 
		COMMENT=9, OBJECT_TERMINATOR=10, NUMERIC=11, STRING=12, VARIABLE=13, WS=14;
	public const int
		RULE_variable_declaration = 0, RULE_expression = 1, RULE_list = 2, RULE_function_definition = 3, 
		RULE_import_statement = 4, RULE_data_statement = 5, RULE_idf = 6, RULE_object = 7;
	public static readonly string[] ruleNames = {
		"variable_declaration", "expression", "list", "function_definition", "import_statement", 
		"data_statement", "idf", "object"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'['", "']'", "'\\'", "'import'", "'data'", null, null, null, 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "FUNCTION_NAME", "OBJECT", "COMMENT", 
		"OBJECT_TERMINATOR", "NUMERIC", "STRING", "VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idfplus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdfplusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IdfplusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IdfplusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(IdfplusParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; Match(VARIABLE);
			State = 17; Match(T__0);
			State = 18; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(IdfplusParser.STRING, 0); }
		public ITerminalNode NUMERIC() { return GetToken(IdfplusParser.NUMERIC, 0); }
		public ITerminalNode VARIABLE() { return GetToken(IdfplusParser.VARIABLE, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public Data_statementContext data_statement() {
			return GetRuleContext<Data_statementContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; Match(STRING);
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; Match(NUMERIC);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22; Match(VARIABLE);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 23; list();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 24; data_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 4, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(T__1);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << NUMERIC) | (1L << STRING) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 28; expression();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public ITerminalNode FUNCTION_NAME() { return GetToken(IdfplusParser.FUNCTION_NAME, 0); }
		public ITerminalNode STRING() { return GetToken(IdfplusParser.STRING, 0); }
		public ITerminalNode[] VARIABLE() { return GetTokens(IdfplusParser.VARIABLE); }
		public ITerminalNode VARIABLE(int i) {
			return GetToken(IdfplusParser.VARIABLE, i);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__3);
			State = 37; Match(FUNCTION_NAME);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARIABLE) {
				{
				{
				State = 38; Match(VARIABLE);
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(IdfplusParser.STRING, 0); }
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__4);
			State = 47; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_statementContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(IdfplusParser.STRING, 0); }
		public Data_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterData_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitData_statement(this);
		}
	}

	[RuleVersion(0)]
	public Data_statementContext data_statement() {
		Data_statementContext _localctx = new Data_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_data_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__5);
			State = 50; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdfContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(IdfplusParser.Eof, 0); }
		public ITerminalNode[] COMMENT() { return GetTokens(IdfplusParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IdfplusParser.COMMENT, i);
		}
		public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public Variable_declarationContext[] variable_declaration() {
			return GetRuleContexts<Variable_declarationContext>();
		}
		public Variable_declarationContext variable_declaration(int i) {
			return GetRuleContext<Variable_declarationContext>(i);
		}
		public Function_definitionContext[] function_definition() {
			return GetRuleContexts<Function_definitionContext>();
		}
		public Function_definitionContext function_definition(int i) {
			return GetRuleContext<Function_definitionContext>(i);
		}
		public Import_statementContext[] import_statement() {
			return GetRuleContexts<Import_statementContext>();
		}
		public Import_statementContext import_statement(int i) {
			return GetRuleContext<Import_statementContext>(i);
		}
		public IdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterIdf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitIdf(this);
		}
	}

	[RuleVersion(0)]
	public IdfContext idf() {
		IdfContext _localctx = new IdfContext(Context, State);
		EnterRule(_localctx, 12, RULE_idf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << OBJECT) | (1L << COMMENT) | (1L << VARIABLE))) != 0)) {
				{
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 52; Match(COMMENT);
					}
					break;
				case OBJECT:
					{
					State = 53; @object();
					}
					break;
				case VARIABLE:
					{
					State = 54; variable_declaration();
					}
					break;
				case T__3:
					{
					State = 55; function_definition();
					}
					break;
				case T__4:
					{
					State = 56; import_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(IdfplusParser.OBJECT, 0); }
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfplusListener typedListener = listener as IIdfplusListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(OBJECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', '\x45', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', ' ', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '#', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '*', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '-', '\v', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '<', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '?', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x2', '\x2', '\x2', 'G', '\x2', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '=', '\x3', '\x2', '\x2', '\x2', '\x10', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\xF', '\x2', '\x2', '\x13', 
		'\x14', '\a', '\x3', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1C', '\a', 
		'\xE', '\x2', '\x2', '\x17', '\x1C', '\a', '\r', '\x2', '\x2', '\x18', 
		'\x1C', '\a', '\xF', '\x2', '\x2', '\x19', '\x1C', '\x5', '\x6', '\x4', 
		'\x2', '\x1A', '\x1C', '\x5', '\f', '\a', '\x2', '\x1B', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '!', '\a', '\x4', '\x2', '\x2', '\x1E', ' ', 
		'\x5', '\x4', '\x3', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x3', '\x2', 
		'\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x5', 
		'\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', 
		'\x6', '\x2', '\x2', '\'', '+', '\a', '\t', '\x2', '\x2', '(', '*', '\a', 
		'\xF', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', 
		'\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\xE', '\x2', '\x2', '/', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\a', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\xE', '\x2', '\x2', '\x32', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', '\b', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\xE', '\x2', '\x2', '\x35', '\r', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'<', '\a', '\v', '\x2', '\x2', '\x37', '<', '\x5', '\x10', '\t', '\x2', 
		'\x38', '<', '\x5', '\x2', '\x2', '\x2', '\x39', '<', '\x5', '\b', '\x5', 
		'\x2', ':', '<', '\x5', '\n', '\x6', '\x2', ';', '\x36', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x37', '\x3', '\x2', '\x2', '\x2', ';', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', 
		'\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', '=', 
		';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '\x2', '\x2', '\x3', '\x41', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\n', '\x2', '\x2', '\x43', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x1B', '!', '+', ';', '=',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
