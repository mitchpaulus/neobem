//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Idf.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IdfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, FIELDSEP=2, TERMINATOR=3, IDFFIELD=4, WS=5;
	public const int
		RULE_idfFile = 0, RULE_idfObject = 1, RULE_idfHeader = 2;
	public static readonly string[] ruleNames = {
		"idfFile", "idfObject", "idfHeader"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "FIELDSEP", "TERMINATOR", "IDFFIELD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IdfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IdfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdfFileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(IdfParser.Eof, 0); }
		public IdfObjectContext[] idfObject() {
			return GetRuleContexts<IdfObjectContext>();
		}
		public IdfObjectContext idfObject(int i) {
			return GetRuleContext<IdfObjectContext>(i);
		}
		public IdfFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idfFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterIdfFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitIdfFile(this);
		}
	}

	[RuleVersion(0)]
	public IdfFileContext idfFile() {
		IdfFileContext _localctx = new IdfFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_idfFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDFFIELD) {
				{
				{
				State = 6; idfObject();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 12; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdfObjectContext : ParserRuleContext {
		public IdfHeaderContext idfHeader() {
			return GetRuleContext<IdfHeaderContext>(0);
		}
		public ITerminalNode[] FIELDSEP() { return GetTokens(IdfParser.FIELDSEP); }
		public ITerminalNode FIELDSEP(int i) {
			return GetToken(IdfParser.FIELDSEP, i);
		}
		public ITerminalNode TERMINATOR() { return GetToken(IdfParser.TERMINATOR, 0); }
		public ITerminalNode[] IDFFIELD() { return GetTokens(IdfParser.IDFFIELD); }
		public ITerminalNode IDFFIELD(int i) {
			return GetToken(IdfParser.IDFFIELD, i);
		}
		public IdfObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idfObject; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterIdfObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitIdfObject(this);
		}
	}

	[RuleVersion(0)]
	public IdfObjectContext idfObject() {
		IdfObjectContext _localctx = new IdfObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_idfObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; idfHeader();
			State = 15; Match(FIELDSEP);
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDFFIELD) {
				{
				State = 16; Match(IDFFIELD);
				}
			}

			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FIELDSEP) {
				{
				{
				State = 19; Match(FIELDSEP);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDFFIELD) {
					{
					State = 20; Match(IDFFIELD);
					}
				}

				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28; Match(TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdfHeaderContext : ParserRuleContext {
		public ITerminalNode IDFFIELD() { return GetToken(IdfParser.IDFFIELD, 0); }
		public IdfHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idfHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterIdfHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitIdfHeader(this);
		}
	}

	[RuleVersion(0)]
	public IdfHeaderContext idfHeader() {
		IdfHeaderContext _localctx = new IdfHeaderContext(Context, State);
		EnterRule(_localctx, 4, RULE_idfHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(IDFFIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\a', '#', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\a', '\x2', '\n', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\r', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x14', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x18', '\n', '\x3', 
		'\a', '\x3', '\x1A', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', '\x2', '\x2', 
		'#', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '\n', '\x5', 
		'\x4', '\x3', '\x2', '\t', '\b', '\x3', '\x2', '\x2', '\x2', '\n', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\t', '\x3', '\x2', '\x2', '\x2', '\v', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\v', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\a', '\x2', '\x2', 
		'\x3', '\xF', '\x3', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', 
		'\x6', '\x4', '\x2', '\x11', '\x13', '\a', '\x4', '\x2', '\x2', '\x12', 
		'\x14', '\a', '\x6', '\x2', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x17', '\a', '\x4', '\x2', '\x2', '\x16', 
		'\x18', '\a', '\x6', '\x2', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x15', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\a', '\x5', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\x6', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\v', '\x13', '\x17', '\x1B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
