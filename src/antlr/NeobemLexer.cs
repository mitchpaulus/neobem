//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NeobemLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using src;
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class NeobemLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, LPAREN=2, RPAREN=3, CARET=4, MULTOP=5, DIVIDEOP=6, PLUSOP=7, 
		MINUSOP=8, LESSTHAN=9, GREATERTHAN=10, LESS_THAN_OR_EQUAL_TO=11, GREATER_THAN_OR_EQUAL_TO=12, 
		EQUAL_TO=13, NOT_EQUAL_TO=14, MAP_OPERATOR=15, FILTER_OPERATOR=16, PIPE_OPERATOR=17, 
		AND_OP=18, OR_OP=19, IF=20, THEN=21, ELSE=22, FUNCTION_BEGIN=23, LCURLY=24, 
		RCURLY=25, RETURN=26, LSQUARE=27, RSQUARE=28, IMPORT=29, AS=30, ONLY=31, 
		NOT=32, EXPORT=33, PRINT=34, LOG=35, LET=36, IN=37, RANGE_OPERATOR=38, 
		MEMBER_ACCESS=39, STRUCT_SEP=40, COMMA=41, BCL_ID=42, UUID=43, INLINE_TABLE_BEGIN_END_SEP=44, 
		INLINE_TABLE_COL_SEP=45, BOOLEAN_LITERAL_TRUE=46, BOOLEAN_LITERAL_FALSE=47, 
		IDENTIFIER=48, COMMENT=49, DOE2COMMENT=50, NEOBEM_COMMENT=51, NUMERIC=52, 
		STRING=53, OBJECT_TYPE=54, DOE2IDENTIFIER=55, DOE2STRING_UNAME=56, WS=57, 
		FIELD=58, FIELD_SEP=59, OBJECT_COMMENT=60, OBJECT_TERMINATOR=61, OBJECT_WS=62, 
		DOE2_LIST_START=63, DOE2_LIST_END=64, DOE2_OBJECT_COMMENT=65, DOE2_STRING=66, 
		DOE2_LITERAL=67, DOE2_TERMINATOR=68, DOE2_FIELD_SEP=69, DOE2_FIELD=70;
	public const int
		IDFOBJECT=1, DOE2OBJECT=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "IDFOBJECT", "DOE2OBJECT"
	};

	public static readonly string[] ruleNames = {
		"EQUALS", "LPAREN", "RPAREN", "CARET", "MULTOP", "DIVIDEOP", "PLUSOP", 
		"MINUSOP", "LESSTHAN", "GREATERTHAN", "LESS_THAN_OR_EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO", 
		"EQUAL_TO", "NOT_EQUAL_TO", "MAP_OPERATOR", "FILTER_OPERATOR", "PIPE_OPERATOR", 
		"AND_OP", "OR_OP", "IF", "THEN", "ELSE", "FUNCTION_BEGIN", "LCURLY", "RCURLY", 
		"RETURN", "LSQUARE", "RSQUARE", "IMPORT", "AS", "ONLY", "NOT", "EXPORT", 
		"PRINT", "LOG", "LET", "IN", "RANGE_OPERATOR", "MEMBER_ACCESS", "STRUCT_SEP", 
		"COMMA", "BCL_ID", "HEX_CHAR", "UUID", "INLINE_TABLE_BEGIN_END_SEP", "INLINE_TABLE_COL_SEP", 
		"BOOLEAN_LITERAL_TRUE", "BOOLEAN_LITERAL_FALSE", "IDENTIFIER", "COMMENT", 
		"DOE2COMMENT", "NEOBEM_COMMENT", "NUMERIC", "STRING", "OBJECT_TYPE", "DOE2IDENTIFIER", 
		"DOE2STRING_UNAME", "WS", "FIELD", "FIELD_SEP", "OBJECT_COMMENT", "OBJECT_TERMINATOR", 
		"OBJECT_WS", "DOE2_LIST_START", "DOE2_LIST_END", "DOE2_OBJECT_COMMENT", 
		"DOE2_STRING", "DOE2_LITERAL", "DOE2_TERMINATOR", "DOE2_FIELD_SEP", "DOE2_FIELD"
	};

	public FileType FileType = FileType.Idf;

	public NeobemLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NeobemLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", null, null, "'^'", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'|='", "'|>'", "'->'", "'and'", "'or'", 
		"'if'", "'then'", "'else'", null, "'{'", "'}'", "'return'", "'['", "']'", 
		"'import'", "'as'", "'only'", "'not'", "'export'", "'print'", "'log'", 
		"'let'", "'in'", null, "'.'", "':'", "','", "'bcl:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "LPAREN", "RPAREN", "CARET", "MULTOP", "DIVIDEOP", "PLUSOP", 
		"MINUSOP", "LESSTHAN", "GREATERTHAN", "LESS_THAN_OR_EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO", 
		"EQUAL_TO", "NOT_EQUAL_TO", "MAP_OPERATOR", "FILTER_OPERATOR", "PIPE_OPERATOR", 
		"AND_OP", "OR_OP", "IF", "THEN", "ELSE", "FUNCTION_BEGIN", "LCURLY", "RCURLY", 
		"RETURN", "LSQUARE", "RSQUARE", "IMPORT", "AS", "ONLY", "NOT", "EXPORT", 
		"PRINT", "LOG", "LET", "IN", "RANGE_OPERATOR", "MEMBER_ACCESS", "STRUCT_SEP", 
		"COMMA", "BCL_ID", "UUID", "INLINE_TABLE_BEGIN_END_SEP", "INLINE_TABLE_COL_SEP", 
		"BOOLEAN_LITERAL_TRUE", "BOOLEAN_LITERAL_FALSE", "IDENTIFIER", "COMMENT", 
		"DOE2COMMENT", "NEOBEM_COMMENT", "NUMERIC", "STRING", "OBJECT_TYPE", "DOE2IDENTIFIER", 
		"DOE2STRING_UNAME", "WS", "FIELD", "FIELD_SEP", "OBJECT_COMMENT", "OBJECT_TERMINATOR", 
		"OBJECT_WS", "DOE2_LIST_START", "DOE2_LIST_END", "DOE2_OBJECT_COMMENT", 
		"DOE2_STRING", "DOE2_LITERAL", "DOE2_TERMINATOR", "DOE2_FIELD_SEP", "DOE2_FIELD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NeobemLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NeobemLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 54 : return OBJECT_TYPE_sempred(_localctx, predIndex);
		case 55 : return DOE2IDENTIFIER_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool OBJECT_TYPE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  FileType == FileType.Idf ;
		}
		return true;
	}
	private bool DOE2IDENTIFIER_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  FileType == FileType.Doe2 ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,70,602,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
		7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,
		7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,
		7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,
		7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
		7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,
		7,69,2,70,7,70,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,
		13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,
		21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,
		39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,324,8,44,10,44,12,44,327,
		9,44,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,336,8,46,1,47,1,47,1,47,1,
		47,1,47,1,47,3,47,344,8,47,1,48,1,48,5,48,348,8,48,10,48,12,48,351,9,48,
		1,49,1,49,5,49,355,8,49,10,49,12,49,358,9,49,1,49,3,49,361,8,49,1,49,1,
		49,1,50,1,50,5,50,367,8,50,10,50,12,50,370,9,50,1,50,3,50,373,8,50,1,50,
		1,50,1,51,1,51,5,51,379,8,51,10,51,12,51,382,9,51,1,51,3,51,385,8,51,1,
		51,1,51,1,51,1,51,1,52,3,52,392,8,52,1,52,1,52,5,52,396,8,52,10,52,12,
		52,399,9,52,1,52,3,52,402,8,52,1,52,1,52,4,52,406,8,52,11,52,12,52,407,
		3,52,410,8,52,1,52,1,52,4,52,414,8,52,11,52,12,52,415,3,52,418,8,52,1,
		52,1,52,3,52,422,8,52,1,52,4,52,425,8,52,11,52,12,52,426,3,52,429,8,52,
		1,53,1,53,5,53,433,8,53,10,53,12,53,436,9,53,1,53,1,53,1,54,1,54,5,54,
		442,8,54,10,54,12,54,445,9,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
		5,55,455,8,55,10,55,12,55,458,9,55,1,55,5,55,461,8,55,10,55,12,55,464,
		9,55,1,55,1,55,1,55,1,55,1,56,1,56,5,56,472,8,56,10,56,12,56,475,9,56,
		1,56,1,56,1,56,1,56,1,57,4,57,482,8,57,11,57,12,57,483,1,57,1,57,1,58,
		4,58,489,8,58,11,58,12,58,490,1,59,1,59,5,59,495,8,59,10,59,12,59,498,
		9,59,1,60,1,60,5,60,502,8,60,10,60,12,60,505,9,60,1,60,3,60,508,8,60,1,
		60,1,60,1,61,1,61,5,61,514,8,61,10,61,12,61,517,9,61,1,61,1,61,5,61,521,
		8,61,10,61,12,61,524,9,61,1,61,3,61,527,8,61,1,61,3,61,530,8,61,1,61,3,
		61,533,8,61,1,61,1,61,1,62,4,62,538,8,62,11,62,12,62,539,1,62,1,62,1,63,
		1,63,1,64,1,64,1,65,1,65,5,65,550,8,65,10,65,12,65,553,9,65,1,65,1,65,
		3,65,557,8,65,1,65,3,65,560,8,65,1,66,1,66,5,66,564,8,66,10,66,12,66,567,
		9,66,1,66,1,66,1,67,1,67,5,67,573,8,67,10,67,12,67,576,9,67,1,67,1,67,
		1,68,1,68,1,68,1,68,1,68,1,69,4,69,586,8,69,11,69,12,69,587,1,70,1,70,
		1,70,5,70,593,8,70,10,70,12,70,596,9,70,1,70,4,70,599,8,70,11,70,12,70,
		600,12,356,368,380,434,456,473,503,522,551,565,574,594,0,71,3,1,5,2,7,
		3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,
		16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,
		28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,81,
		40,83,41,85,42,87,0,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,
		105,51,107,52,109,53,111,54,113,55,115,56,117,57,119,58,121,59,123,60,
		125,61,127,62,129,63,131,64,133,65,135,66,137,67,139,68,141,69,143,70,
		3,0,1,2,17,2,0,92,92,955,955,3,0,48,57,65,70,97,102,5,0,45,45,95,95,9472,
		9472,9516,9516,9524,9524,3,0,124,124,9474,9474,9532,9532,1,0,97,122,4,
		0,48,57,64,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,69,69,101,101,1,0,65,
		90,3,0,48,58,65,90,97,122,4,0,45,45,48,57,65,90,97,122,3,0,9,10,13,13,
		32,32,6,0,10,10,13,13,33,33,36,36,44,44,59,59,2,0,9,9,32,32,5,0,9,10,13,
		13,32,32,44,44,61,61,6,0,9,10,13,13,32,32,40,41,44,44,61,61,644,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
		0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,1,121,1,0,0,0,1,123,1,0,
		0,0,1,125,1,0,0,0,1,127,1,0,0,0,2,129,1,0,0,0,2,131,1,0,0,0,2,133,1,0,
		0,0,2,135,1,0,0,0,2,137,1,0,0,0,2,139,1,0,0,0,2,141,1,0,0,0,2,143,1,0,
		0,0,3,145,1,0,0,0,5,147,1,0,0,0,7,149,1,0,0,0,9,151,1,0,0,0,11,153,1,0,
		0,0,13,155,1,0,0,0,15,157,1,0,0,0,17,159,1,0,0,0,19,161,1,0,0,0,21,163,
		1,0,0,0,23,165,1,0,0,0,25,168,1,0,0,0,27,171,1,0,0,0,29,174,1,0,0,0,31,
		177,1,0,0,0,33,180,1,0,0,0,35,183,1,0,0,0,37,186,1,0,0,0,39,190,1,0,0,
		0,41,193,1,0,0,0,43,196,1,0,0,0,45,201,1,0,0,0,47,206,1,0,0,0,49,208,1,
		0,0,0,51,210,1,0,0,0,53,212,1,0,0,0,55,219,1,0,0,0,57,221,1,0,0,0,59,223,
		1,0,0,0,61,230,1,0,0,0,63,233,1,0,0,0,65,238,1,0,0,0,67,242,1,0,0,0,69,
		249,1,0,0,0,71,255,1,0,0,0,73,259,1,0,0,0,75,263,1,0,0,0,77,266,1,0,0,
		0,79,269,1,0,0,0,81,271,1,0,0,0,83,273,1,0,0,0,85,275,1,0,0,0,87,280,1,
		0,0,0,89,282,1,0,0,0,91,319,1,0,0,0,93,328,1,0,0,0,95,335,1,0,0,0,97,343,
		1,0,0,0,99,345,1,0,0,0,101,352,1,0,0,0,103,364,1,0,0,0,105,376,1,0,0,0,
		107,391,1,0,0,0,109,430,1,0,0,0,111,439,1,0,0,0,113,450,1,0,0,0,115,469,
		1,0,0,0,117,481,1,0,0,0,119,488,1,0,0,0,121,492,1,0,0,0,123,499,1,0,0,
		0,125,532,1,0,0,0,127,537,1,0,0,0,129,543,1,0,0,0,131,545,1,0,0,0,133,
		547,1,0,0,0,135,561,1,0,0,0,137,570,1,0,0,0,139,579,1,0,0,0,141,585,1,
		0,0,0,143,598,1,0,0,0,145,146,5,61,0,0,146,4,1,0,0,0,147,148,5,40,0,0,
		148,6,1,0,0,0,149,150,5,41,0,0,150,8,1,0,0,0,151,152,5,94,0,0,152,10,1,
		0,0,0,153,154,5,42,0,0,154,12,1,0,0,0,155,156,5,47,0,0,156,14,1,0,0,0,
		157,158,5,43,0,0,158,16,1,0,0,0,159,160,5,45,0,0,160,18,1,0,0,0,161,162,
		5,60,0,0,162,20,1,0,0,0,163,164,5,62,0,0,164,22,1,0,0,0,165,166,5,60,0,
		0,166,167,5,61,0,0,167,24,1,0,0,0,168,169,5,62,0,0,169,170,5,61,0,0,170,
		26,1,0,0,0,171,172,5,61,0,0,172,173,5,61,0,0,173,28,1,0,0,0,174,175,5,
		33,0,0,175,176,5,61,0,0,176,30,1,0,0,0,177,178,5,124,0,0,178,179,5,61,
		0,0,179,32,1,0,0,0,180,181,5,124,0,0,181,182,5,62,0,0,182,34,1,0,0,0,183,
		184,5,45,0,0,184,185,5,62,0,0,185,36,1,0,0,0,186,187,5,97,0,0,187,188,
		5,110,0,0,188,189,5,100,0,0,189,38,1,0,0,0,190,191,5,111,0,0,191,192,5,
		114,0,0,192,40,1,0,0,0,193,194,5,105,0,0,194,195,5,102,0,0,195,42,1,0,
		0,0,196,197,5,116,0,0,197,198,5,104,0,0,198,199,5,101,0,0,199,200,5,110,
		0,0,200,44,1,0,0,0,201,202,5,101,0,0,202,203,5,108,0,0,203,204,5,115,0,
		0,204,205,5,101,0,0,205,46,1,0,0,0,206,207,7,0,0,0,207,48,1,0,0,0,208,
		209,5,123,0,0,209,50,1,0,0,0,210,211,5,125,0,0,211,52,1,0,0,0,212,213,
		5,114,0,0,213,214,5,101,0,0,214,215,5,116,0,0,215,216,5,117,0,0,216,217,
		5,114,0,0,217,218,5,110,0,0,218,54,1,0,0,0,219,220,5,91,0,0,220,56,1,0,
		0,0,221,222,5,93,0,0,222,58,1,0,0,0,223,224,5,105,0,0,224,225,5,109,0,
		0,225,226,5,112,0,0,226,227,5,111,0,0,227,228,5,114,0,0,228,229,5,116,
		0,0,229,60,1,0,0,0,230,231,5,97,0,0,231,232,5,115,0,0,232,62,1,0,0,0,233,
		234,5,111,0,0,234,235,5,110,0,0,235,236,5,108,0,0,236,237,5,121,0,0,237,
		64,1,0,0,0,238,239,5,110,0,0,239,240,5,111,0,0,240,241,5,116,0,0,241,66,
		1,0,0,0,242,243,5,101,0,0,243,244,5,120,0,0,244,245,5,112,0,0,245,246,
		5,111,0,0,246,247,5,114,0,0,247,248,5,116,0,0,248,68,1,0,0,0,249,250,5,
		112,0,0,250,251,5,114,0,0,251,252,5,105,0,0,252,253,5,110,0,0,253,254,
		5,116,0,0,254,70,1,0,0,0,255,256,5,108,0,0,256,257,5,111,0,0,257,258,5,
		103,0,0,258,72,1,0,0,0,259,260,5,108,0,0,260,261,5,101,0,0,261,262,5,116,
		0,0,262,74,1,0,0,0,263,264,5,105,0,0,264,265,5,110,0,0,265,76,1,0,0,0,
		266,267,5,46,0,0,267,268,5,46,0,0,268,78,1,0,0,0,269,270,5,46,0,0,270,
		80,1,0,0,0,271,272,5,58,0,0,272,82,1,0,0,0,273,274,5,44,0,0,274,84,1,0,
		0,0,275,276,5,98,0,0,276,277,5,99,0,0,277,278,5,108,0,0,278,279,5,58,0,
		0,279,86,1,0,0,0,280,281,7,1,0,0,281,88,1,0,0,0,282,283,3,87,42,0,283,
		284,3,87,42,0,284,285,3,87,42,0,285,286,3,87,42,0,286,287,3,87,42,0,287,
		288,3,87,42,0,288,289,3,87,42,0,289,290,3,87,42,0,290,291,5,45,0,0,291,
		292,3,87,42,0,292,293,3,87,42,0,293,294,3,87,42,0,294,295,3,87,42,0,295,
		296,5,45,0,0,296,297,3,87,42,0,297,298,3,87,42,0,298,299,3,87,42,0,299,
		300,3,87,42,0,300,301,5,45,0,0,301,302,3,87,42,0,302,303,3,87,42,0,303,
		304,3,87,42,0,304,305,3,87,42,0,305,306,5,45,0,0,306,307,3,87,42,0,307,
		308,3,87,42,0,308,309,3,87,42,0,309,310,3,87,42,0,310,311,3,87,42,0,311,
		312,3,87,42,0,312,313,3,87,42,0,313,314,3,87,42,0,314,315,3,87,42,0,315,
		316,3,87,42,0,316,317,3,87,42,0,317,318,3,87,42,0,318,90,1,0,0,0,319,320,
		7,2,0,0,320,321,7,2,0,0,321,325,7,2,0,0,322,324,7,2,0,0,323,322,1,0,0,
		0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,92,1,0,0,0,327,325,
		1,0,0,0,328,329,7,3,0,0,329,94,1,0,0,0,330,331,5,116,0,0,331,332,5,114,
		0,0,332,333,5,117,0,0,333,336,5,101,0,0,334,336,5,10003,0,0,335,330,1,
		0,0,0,335,334,1,0,0,0,336,96,1,0,0,0,337,338,5,102,0,0,338,339,5,97,0,
		0,339,340,5,108,0,0,340,341,5,115,0,0,341,344,5,101,0,0,342,344,5,10007,
		0,0,343,337,1,0,0,0,343,342,1,0,0,0,344,98,1,0,0,0,345,349,7,4,0,0,346,
		348,7,5,0,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,
		0,0,0,350,100,1,0,0,0,351,349,1,0,0,0,352,356,5,33,0,0,353,355,9,0,0,0,
		354,353,1,0,0,0,355,358,1,0,0,0,356,357,1,0,0,0,356,354,1,0,0,0,357,360,
		1,0,0,0,358,356,1,0,0,0,359,361,5,13,0,0,360,359,1,0,0,0,360,361,1,0,0,
		0,361,362,1,0,0,0,362,363,5,10,0,0,363,102,1,0,0,0,364,368,5,36,0,0,365,
		367,9,0,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,369,1,0,0,0,368,366,1,
		0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,371,373,5,13,0,0,372,371,1,0,0,0,
		372,373,1,0,0,0,373,374,1,0,0,0,374,375,5,10,0,0,375,104,1,0,0,0,376,380,
		5,35,0,0,377,379,9,0,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,381,1,0,0,
		0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,383,385,5,13,0,0,384,
		383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,10,0,0,387,388,1,
		0,0,0,388,389,6,51,0,0,389,106,1,0,0,0,390,392,5,45,0,0,391,390,1,0,0,
		0,391,392,1,0,0,0,392,417,1,0,0,0,393,397,7,6,0,0,394,396,7,7,0,0,395,
		394,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,402,1,
		0,0,0,399,397,1,0,0,0,400,402,5,48,0,0,401,393,1,0,0,0,401,400,1,0,0,0,
		402,409,1,0,0,0,403,405,5,46,0,0,404,406,7,7,0,0,405,404,1,0,0,0,406,407,
		1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,403,1,0,0,
		0,409,410,1,0,0,0,410,418,1,0,0,0,411,413,5,46,0,0,412,414,7,7,0,0,413,
		412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,
		0,0,0,417,401,1,0,0,0,417,411,1,0,0,0,418,428,1,0,0,0,419,421,7,8,0,0,
		420,422,5,45,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,
		7,7,0,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,
		0,427,429,1,0,0,0,428,419,1,0,0,0,428,429,1,0,0,0,429,108,1,0,0,0,430,
		434,5,39,0,0,431,433,9,0,0,0,432,431,1,0,0,0,433,436,1,0,0,0,434,435,1,
		0,0,0,434,432,1,0,0,0,435,437,1,0,0,0,436,434,1,0,0,0,437,438,5,39,0,0,
		438,110,1,0,0,0,439,443,7,9,0,0,440,442,7,10,0,0,441,440,1,0,0,0,442,445,
		1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,443,1,0,0,
		0,446,447,4,54,0,0,447,448,1,0,0,0,448,449,6,54,1,0,449,112,1,0,0,0,450,
		462,7,9,0,0,451,461,7,11,0,0,452,456,5,60,0,0,453,455,9,0,0,0,454,453,
		1,0,0,0,455,458,1,0,0,0,456,457,1,0,0,0,456,454,1,0,0,0,457,459,1,0,0,
		0,458,456,1,0,0,0,459,461,5,62,0,0,460,451,1,0,0,0,460,452,1,0,0,0,461,
		464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,462,1,
		0,0,0,465,466,4,55,1,0,466,467,1,0,0,0,467,468,6,55,2,0,468,114,1,0,0,
		0,469,473,5,34,0,0,470,472,9,0,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,
		474,1,0,0,0,473,471,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,5,
		34,0,0,477,478,1,0,0,0,478,479,6,56,2,0,479,116,1,0,0,0,480,482,7,12,0,
		0,481,480,1,0,0,0,482,483,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,
		485,1,0,0,0,485,486,6,57,3,0,486,118,1,0,0,0,487,489,8,13,0,0,488,487,
		1,0,0,0,489,490,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,120,1,0,0,
		0,492,496,5,44,0,0,493,495,7,12,0,0,494,493,1,0,0,0,495,498,1,0,0,0,496,
		494,1,0,0,0,496,497,1,0,0,0,497,122,1,0,0,0,498,496,1,0,0,0,499,503,5,
		33,0,0,500,502,9,0,0,0,501,500,1,0,0,0,502,505,1,0,0,0,503,504,1,0,0,0,
		503,501,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,506,508,5,13,0,0,507,506,
		1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,5,10,0,0,510,124,1,0,0,
		0,511,515,5,59,0,0,512,514,7,14,0,0,513,512,1,0,0,0,514,517,1,0,0,0,515,
		513,1,0,0,0,515,516,1,0,0,0,516,529,1,0,0,0,517,515,1,0,0,0,518,522,5,
		33,0,0,519,521,9,0,0,0,520,519,1,0,0,0,521,524,1,0,0,0,522,523,1,0,0,0,
		522,520,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,525,527,5,13,0,0,526,525,
		1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,530,5,10,0,0,529,518,1,0,0,
		0,529,530,1,0,0,0,530,533,1,0,0,0,531,533,5,36,0,0,532,511,1,0,0,0,532,
		531,1,0,0,0,533,534,1,0,0,0,534,535,6,61,4,0,535,126,1,0,0,0,536,538,7,
		12,0,0,537,536,1,0,0,0,538,539,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,
		540,541,1,0,0,0,541,542,6,62,5,0,542,128,1,0,0,0,543,544,5,40,0,0,544,
		130,1,0,0,0,545,546,5,41,0,0,546,132,1,0,0,0,547,551,5,36,0,0,548,550,
		9,0,0,0,549,548,1,0,0,0,550,553,1,0,0,0,551,552,1,0,0,0,551,549,1,0,0,
		0,552,559,1,0,0,0,553,551,1,0,0,0,554,560,5,36,0,0,555,557,5,13,0,0,556,
		555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,5,10,0,0,559,554,1,
		0,0,0,559,556,1,0,0,0,560,134,1,0,0,0,561,565,5,34,0,0,562,564,9,0,0,0,
		563,562,1,0,0,0,564,567,1,0,0,0,565,566,1,0,0,0,565,563,1,0,0,0,566,568,
		1,0,0,0,567,565,1,0,0,0,568,569,5,34,0,0,569,136,1,0,0,0,570,574,5,42,
		0,0,571,573,9,0,0,0,572,571,1,0,0,0,573,576,1,0,0,0,574,575,1,0,0,0,574,
		572,1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,0,577,578,5,42,0,0,578,138,1,
		0,0,0,579,580,5,46,0,0,580,581,5,46,0,0,581,582,1,0,0,0,582,583,6,68,4,
		0,583,140,1,0,0,0,584,586,7,15,0,0,585,584,1,0,0,0,586,587,1,0,0,0,587,
		585,1,0,0,0,587,588,1,0,0,0,588,142,1,0,0,0,589,599,8,16,0,0,590,594,5,
		60,0,0,591,593,9,0,0,0,592,591,1,0,0,0,593,596,1,0,0,0,594,595,1,0,0,0,
		594,592,1,0,0,0,595,597,1,0,0,0,596,594,1,0,0,0,597,599,5,62,0,0,598,589,
		1,0,0,0,598,590,1,0,0,0,599,600,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,
		0,601,144,1,0,0,0,49,0,1,2,325,335,343,349,356,360,368,372,380,384,391,
		397,401,407,409,415,417,421,426,428,434,443,456,460,462,473,483,490,496,
		503,507,515,522,526,529,532,539,551,556,559,565,574,587,594,598,600,6,
		0,1,0,5,1,0,5,2,0,0,2,0,4,0,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
