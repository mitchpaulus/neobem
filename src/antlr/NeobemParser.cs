//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NeobemParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class NeobemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, LPAREN=2, RPAREN=3, CARET=4, MULTOP=5, DIVIDEOP=6, PLUSOP=7, 
		MINUSOP=8, LESSTHAN=9, GREATERTHAN=10, LESS_THAN_OR_EQUAL_TO=11, GREATER_THAN_OR_EQUAL_TO=12, 
		EQUAL_TO=13, NOT_EQUAL_TO=14, MAP_OPERATOR=15, FILTER_OPERATOR=16, PIPE_OPERATOR=17, 
		AND_OP=18, OR_OP=19, IF=20, THEN=21, ELSE=22, FUNCTION_BEGIN=23, LCURLY=24, 
		RCURLY=25, RETURN=26, LSQUARE=27, RSQUARE=28, IMPORT=29, AS=30, ONLY=31, 
		NOT=32, EXPORT=33, PRINT=34, LOG=35, LET=36, IN=37, RANGE_OPERATOR=38, 
		MEMBER_ACCESS=39, STRUCT_SEP=40, COMMA=41, BCL_ID=42, UUID=43, INLINE_TABLE_BEGIN_END_SEP=44, 
		INLINE_TABLE_COL_SEP=45, BOOLEAN_LITERAL_TRUE=46, BOOLEAN_LITERAL_FALSE=47, 
		IDENTIFIER=48, COMMENT=49, DOE2COMMENT=50, NEOBEM_COMMENT=51, NUMERIC=52, 
		STRING=53, OBJECT_TYPE=54, DOE2IDENTIFIER=55, DOE2STRING_UNAME=56, WS=57, 
		FIELD=58, FIELD_SEP=59, OBJECT_COMMENT=60, OBJECT_TERMINATOR=61, OBJECT_WS=62, 
		DOE2_LIST_START=63, DOE2_LIST_END=64, DOE2_OBJECT_COMMENT=65, DOE2_STRING=66, 
		DOE2_LITERAL=67, DOE2_TERMINATOR=68, DOE2_FIELD_SEP=69, DOE2_FIELD=70;
	public const int
		RULE_variable_declaration = 0, RULE_expression = 1, RULE_functional_operator = 2, 
		RULE_function_application = 3, RULE_function_parameter = 4, RULE_boolean_exp_operator = 5, 
		RULE_if_exp = 6, RULE_lambda_def = 7, RULE_return_statement = 8, RULE_idfplus_object = 9, 
		RULE_idfplus_object_property_def = 10, RULE_list = 11, RULE_import_statement = 12, 
		RULE_import_option = 13, RULE_export_statement = 14, RULE_print_statment = 15, 
		RULE_log_statement = 16, RULE_inline_table = 17, RULE_inline_table_header = 18, 
		RULE_inline_table_header_separator = 19, RULE_inline_table_data_row = 20, 
		RULE_function_statement = 21, RULE_base_idf = 22, RULE_let_binding = 23, 
		RULE_let_expression = 24, RULE_object = 25, RULE_doe2object = 26, RULE_doe2word = 27, 
		RULE_doe2_list_item = 28, RULE_doe2list = 29, RULE_idf = 30;
	public static readonly string[] ruleNames = {
		"variable_declaration", "expression", "functional_operator", "function_application", 
		"function_parameter", "boolean_exp_operator", "if_exp", "lambda_def", 
		"return_statement", "idfplus_object", "idfplus_object_property_def", "list", 
		"import_statement", "import_option", "export_statement", "print_statment", 
		"log_statement", "inline_table", "inline_table_header", "inline_table_header_separator", 
		"inline_table_data_row", "function_statement", "base_idf", "let_binding", 
		"let_expression", "object", "doe2object", "doe2word", "doe2_list_item", 
		"doe2list", "idf"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", null, null, "'^'", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'|='", "'|>'", "'->'", "'and'", "'or'", 
		"'if'", "'then'", "'else'", null, "'{'", "'}'", "'return'", "'['", "']'", 
		"'import'", "'as'", "'only'", "'not'", "'export'", "'print'", "'log'", 
		"'let'", "'in'", null, "'.'", "':'", "','", "'bcl:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "LPAREN", "RPAREN", "CARET", "MULTOP", "DIVIDEOP", "PLUSOP", 
		"MINUSOP", "LESSTHAN", "GREATERTHAN", "LESS_THAN_OR_EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO", 
		"EQUAL_TO", "NOT_EQUAL_TO", "MAP_OPERATOR", "FILTER_OPERATOR", "PIPE_OPERATOR", 
		"AND_OP", "OR_OP", "IF", "THEN", "ELSE", "FUNCTION_BEGIN", "LCURLY", "RCURLY", 
		"RETURN", "LSQUARE", "RSQUARE", "IMPORT", "AS", "ONLY", "NOT", "EXPORT", 
		"PRINT", "LOG", "LET", "IN", "RANGE_OPERATOR", "MEMBER_ACCESS", "STRUCT_SEP", 
		"COMMA", "BCL_ID", "UUID", "INLINE_TABLE_BEGIN_END_SEP", "INLINE_TABLE_COL_SEP", 
		"BOOLEAN_LITERAL_TRUE", "BOOLEAN_LITERAL_FALSE", "IDENTIFIER", "COMMENT", 
		"DOE2COMMENT", "NEOBEM_COMMENT", "NUMERIC", "STRING", "OBJECT_TYPE", "DOE2IDENTIFIER", 
		"DOE2STRING_UNAME", "WS", "FIELD", "FIELD_SEP", "OBJECT_COMMENT", "OBJECT_TERMINATOR", 
		"OBJECT_WS", "DOE2_LIST_START", "DOE2_LIST_END", "DOE2_OBJECT_COMMENT", 
		"DOE2_STRING", "DOE2_LITERAL", "DOE2_TERMINATOR", "DOE2_FIELD_SEP", "DOE2_FIELD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NeobemParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NeobemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NeobemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NeobemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NeobemParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(NeobemParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(IDENTIFIER);
			State = 63;
			Match(EQUALS);
			State = 64;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InlineTableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inline_tableContext inline_table() {
			return GetRuleContext<Inline_tableContext>(0);
		}
		public InlineTableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterInlineTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitInlineTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpContext : ExpressionContext {
		public ExpressionContext funcexp;
		[System.Diagnostics.DebuggerNonUserCode] public Function_applicationContext function_application() {
			return GetRuleContext<Function_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Idfplus_objectContext idfplus_object() {
			return GetRuleContext<Idfplus_objectContext>(0);
		}
		public ObjExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterObjExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitObjExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(NeobemParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(NeobemParser.RPAREN, 0); }
		public ParensExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterParensExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitParensExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Doe2StringExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2STRING_UNAME() { return GetToken(NeobemParser.DOE2STRING_UNAME, 0); }
		public Doe2StringExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2StringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2StringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2StringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NeobemParser.STRING, 0); }
		public StringExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_defContext lambda_def() {
			return GetRuleContext<Lambda_defContext>(0);
		}
		public LambdaExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLambdaExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLambdaExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_ACCESS() { return GetToken(NeobemParser.MEMBER_ACCESS, 0); }
		public MemberAccessExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSOP() { return GetToken(NeobemParser.PLUSOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSOP() { return GetToken(NeobemParser.MINUSOP, 0); }
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(NeobemParser.NUMERIC, 0); }
		public NumericExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterNumericExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitNumericExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetBindingExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Let_bindingContext let_binding() {
			return GetRuleContext<Let_bindingContext>(0);
		}
		public LetBindingExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLetBindingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLetBindingExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetBindingExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralFalseExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL_FALSE() { return GetToken(NeobemParser.BOOLEAN_LITERAL_FALSE, 0); }
		public BooleanLiteralFalseExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralFalseExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralFalseExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralFalseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_OPERATOR() { return GetToken(NeobemParser.RANGE_OPERATOR, 0); }
		public RangeExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterRangeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitRangeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterListExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitListExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapPipeFilterExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Functional_operatorContext functional_operator() {
			return GetRuleContext<Functional_operatorContext>(0);
		}
		public MapPipeFilterExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterMapPipeFilterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitMapPipeFilterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapPipeFilterExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralTrueExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL_TRUE() { return GetToken(NeobemParser.BOOLEAN_LITERAL_TRUE, 0); }
		public BooleanLiteralTrueExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteralTrueExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteralTrueExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteralTrueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NeobemParser.IDENTIFIER, 0); }
		public VariableExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitVariableExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_expContext if_exp() {
			return GetRuleContext<If_expContext>(0);
		}
		public IfExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BclExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCL_ID() { return GetToken(NeobemParser.BCL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(NeobemParser.UUID, 0); }
		public BclExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterBclExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitBclExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBclExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_exp_operatorContext boolean_exp_operator() {
			return GetRuleContext<Boolean_exp_operatorContext>(0);
		}
		public BooleanExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterBooleanExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitBooleanExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponientiateContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(NeobemParser.CARET, 0); }
		public ExponientiateContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterExponientiate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitExponientiate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponientiate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicExpContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(NeobemParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(NeobemParser.OR_OP, 0); }
		public LogicExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLogicExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLogicExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultDivideContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTOP() { return GetToken(NeobemParser.MULTOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDEOP() { return GetToken(NeobemParser.DIVIDEOP, 0); }
		public MultDivideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterMultDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitMultDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				_localctx = new StringExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 67;
				Match(STRING);
				}
				break;
			case DOE2STRING_UNAME:
				{
				_localctx = new Doe2StringExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68;
				Match(DOE2STRING_UNAME);
				}
				break;
			case NUMERIC:
				{
				_localctx = new NumericExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69;
				Match(NUMERIC);
				}
				break;
			case BOOLEAN_LITERAL_TRUE:
				{
				_localctx = new BooleanLiteralTrueExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70;
				Match(BOOLEAN_LITERAL_TRUE);
				}
				break;
			case BOOLEAN_LITERAL_FALSE:
				{
				_localctx = new BooleanLiteralFalseExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71;
				Match(BOOLEAN_LITERAL_FALSE);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new VariableExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				Match(IDENTIFIER);
				}
				break;
			case BCL_ID:
				{
				_localctx = new BclExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73;
				Match(BCL_ID);
				State = 74;
				Match(UUID);
				}
				break;
			case LSQUARE:
				{
				_localctx = new ListExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75;
				list();
				}
				break;
			case IF:
				{
				_localctx = new IfExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				if_exp();
				}
				break;
			case LCURLY:
				{
				_localctx = new ObjExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77;
				idfplus_object();
				}
				break;
			case FUNCTION_BEGIN:
				{
				_localctx = new LambdaExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78;
				lambda_def();
				}
				break;
			case LET:
				{
				_localctx = new LetBindingExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79;
				let_binding();
				}
				break;
			case INLINE_TABLE_BEGIN_END_SEP:
				{
				_localctx = new InlineTableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80;
				inline_table();
				}
				break;
			case LPAREN:
				{
				_localctx = new ParensExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81;
				Match(LPAREN);
				State = 82;
				expression(0);
				State = 83;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 115;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MemberAccessExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 87;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 88;
						Match(MEMBER_ACCESS);
						State = 89;
						expression(24);
						}
						break;
					case 2:
						{
						_localctx = new RangeExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 90;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 91;
						Match(RANGE_OPERATOR);
						State = 92;
						expression(23);
						}
						break;
					case 3:
						{
						_localctx = new MapPipeFilterExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 93;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 94;
						functional_operator();
						State = 95;
						expression(21);
						}
						break;
					case 4:
						{
						_localctx = new ExponientiateContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 98;
						Match(CARET);
						State = 99;
						expression(19);
						}
						break;
					case 5:
						{
						_localctx = new MultDivideContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 101;
						((MultDivideContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULTOP || _la==DIVIDEOP) ) {
							((MultDivideContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 102;
						expression(19);
						}
						break;
					case 6:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 103;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 104;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUSOP || _la==MINUSOP) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 105;
						expression(18);
						}
						break;
					case 7:
						{
						_localctx = new BooleanExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 107;
						boolean_exp_operator();
						State = 108;
						expression(17);
						}
						break;
					case 8:
						{
						_localctx = new LogicExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 111;
						((LogicExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND_OP || _la==OR_OP) ) {
							((LogicExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 112;
						expression(16);
						}
						break;
					case 9:
						{
						_localctx = new FunctionExpContext(new ExpressionContext(_parentctx, _parentState));
						((FunctionExpContext)_localctx).funcexp = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 114;
						function_application();
						}
						break;
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Functional_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP_OPERATOR() { return GetToken(NeobemParser.MAP_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_OPERATOR() { return GetToken(NeobemParser.FILTER_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE_OPERATOR() { return GetToken(NeobemParser.PIPE_OPERATOR, 0); }
		public Functional_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functional_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctional_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Functional_operatorContext functional_operator() {
		Functional_operatorContext _localctx = new Functional_operatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_functional_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_applicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(NeobemParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(NeobemParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NeobemParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NeobemParser.COMMA, i);
		}
		public Function_applicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_application; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunction_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunction_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_application(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_applicationContext function_application() {
		Function_applicationContext _localctx = new Function_applicationContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_application);
		int _la;
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(LPAREN);
				State = 123;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(LPAREN);
				State = 125;
				function_parameter();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 126;
					Match(COMMA);
					State = 127;
					function_parameter();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_exp_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(NeobemParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(NeobemParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(NeobemParser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(NeobemParser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL_TO() { return GetToken(NeobemParser.LESS_THAN_OR_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL_TO() { return GetToken(NeobemParser.GREATER_THAN_OR_EQUAL_TO, 0); }
		public Boolean_exp_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_exp_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterBoolean_exp_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitBoolean_exp_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_exp_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_exp_operatorContext boolean_exp_operator() {
		Boolean_exp_operatorContext _localctx = new Boolean_exp_operatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_boolean_exp_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 32256L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(NeobemParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(NeobemParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NeobemParser.ELSE, 0); }
		public If_expContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIf_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIf_exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_expContext if_exp() {
		If_expContext _localctx = new If_expContext(Context, State);
		EnterRule(_localctx, 12, RULE_if_exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(IF);
			State = 142;
			expression(0);
			State = 143;
			Match(THEN);
			State = 144;
			expression(0);
			State = 145;
			Match(ELSE);
			State = 146;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_BEGIN() { return GetToken(NeobemParser.FUNCTION_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(NeobemParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(NeobemParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NeobemParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NeobemParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Lambda_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLambda_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLambda_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_defContext lambda_def() {
		Lambda_defContext _localctx = new Lambda_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambda_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(FUNCTION_BEGIN);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 149;
				Match(IDENTIFIER);
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			Match(LCURLY);
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 156;
				expression(0);
				}
				break;
			case 2:
				{
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 126945266103222272L) != 0) {
					{
					{
					State = 157;
					function_statement();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 165;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(NeobemParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(RETURN);
			State = 168;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Idfplus_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(NeobemParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(NeobemParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Idfplus_object_property_defContext[] idfplus_object_property_def() {
			return GetRuleContexts<Idfplus_object_property_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Idfplus_object_property_defContext idfplus_object_property_def(int i) {
			return GetRuleContext<Idfplus_object_property_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NeobemParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NeobemParser.COMMA, i);
		}
		public Idfplus_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idfplus_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIdfplus_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIdfplus_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdfplus_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Idfplus_objectContext idfplus_object() {
		Idfplus_objectContext _localctx = new Idfplus_objectContext(Context, State);
		EnterRule(_localctx, 18, RULE_idfplus_object);
		int _la;
		try {
			int _alt;
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				Match(LCURLY);
				{
				State = 171;
				idfplus_object_property_def();
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 172;
						Match(COMMA);
						State = 173;
						idfplus_object_property_def();
						}
						} 
					}
					State = 178;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 179;
					Match(COMMA);
					}
				}

				State = 182;
				Match(RCURLY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(LCURLY);
				State = 185;
				Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Idfplus_object_property_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT_SEP() { return GetToken(NeobemParser.STRUCT_SEP, 0); }
		public Idfplus_object_property_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idfplus_object_property_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIdfplus_object_property_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIdfplus_object_property_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdfplus_object_property_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Idfplus_object_property_defContext idfplus_object_property_def() {
		Idfplus_object_property_defContext _localctx = new Idfplus_object_property_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_idfplus_object_property_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			expression(0);
			State = 189;
			Match(STRUCT_SEP);
			State = 190;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(NeobemParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(NeobemParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NeobemParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NeobemParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 22, RULE_list);
		int _la;
		try {
			int _alt;
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(LSQUARE);
				State = 193;
				Match(RSQUARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(LSQUARE);
				State = 195;
				expression(0);
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 196;
						Match(COMMA);
						State = 197;
						expression(0);
						}
						} 
					}
					State = 202;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 203;
					Match(COMMA);
					}
				}

				State = 206;
				Match(RSQUARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(NeobemParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_optionContext[] import_option() {
			return GetRuleContexts<Import_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_optionContext import_option(int i) {
			return GetRuleContext<Import_optionContext>(i);
		}
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_import_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(IMPORT);
			State = 211;
			expression(0);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0) {
				{
				{
				State = 212;
				import_option();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_optionContext : ParserRuleContext {
		public Import_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_option; } }
	 
		public Import_optionContext() { }
		public virtual void CopyFrom(Import_optionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OnlyOptionContext : Import_optionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(NeobemParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(NeobemParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(NeobemParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NeobemParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NeobemParser.IDENTIFIER, i);
		}
		public OnlyOptionContext(Import_optionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterOnlyOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitOnlyOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnlyOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotOptionContext : Import_optionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(NeobemParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(NeobemParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(NeobemParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NeobemParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NeobemParser.IDENTIFIER, i);
		}
		public NotOptionContext(Import_optionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterNotOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitNotOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsOptionContext : Import_optionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(NeobemParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NeobemParser.IDENTIFIER, 0); }
		public AsOptionContext(Import_optionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterAsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitAsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_optionContext import_option() {
		Import_optionContext _localctx = new Import_optionContext(Context, State);
		EnterRule(_localctx, 26, RULE_import_option);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				_localctx = new AsOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				Match(AS);
				State = 219;
				Match(IDENTIFIER);
				}
				break;
			case ONLY:
				_localctx = new OnlyOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				Match(ONLY);
				State = 221;
				Match(LPAREN);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 222;
					Match(IDENTIFIER);
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				State = 227;
				Match(RPAREN);
				}
				break;
			case NOT:
				_localctx = new NotOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				Match(NOT);
				State = 229;
				Match(LPAREN);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 230;
					Match(IDENTIFIER);
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==IDENTIFIER );
				State = 235;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(NeobemParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(NeobemParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(NeobemParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NeobemParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NeobemParser.IDENTIFIER, i);
		}
		public Export_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_statementContext export_statement() {
		Export_statementContext _localctx = new Export_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_export_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(EXPORT);
			State = 239;
			Match(LPAREN);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 240;
				Match(IDENTIFIER);
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 245;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(NeobemParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterPrint_statment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitPrint_statment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statmentContext print_statment() {
		Print_statmentContext _localctx = new Print_statmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_print_statment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(PRINT);
			State = 248;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(NeobemParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Log_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLog_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLog_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Log_statementContext log_statement() {
		Log_statementContext _localctx = new Log_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_log_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(LOG);
			State = 251;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INLINE_TABLE_BEGIN_END_SEP() { return GetTokens(NeobemParser.INLINE_TABLE_BEGIN_END_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_TABLE_BEGIN_END_SEP(int i) {
			return GetToken(NeobemParser.INLINE_TABLE_BEGIN_END_SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_table_headerContext inline_table_header() {
			return GetRuleContext<Inline_table_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_table_header_separatorContext inline_table_header_separator() {
			return GetRuleContext<Inline_table_header_separatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_table_data_rowContext[] inline_table_data_row() {
			return GetRuleContexts<Inline_table_data_rowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inline_table_data_rowContext inline_table_data_row(int i) {
			return GetRuleContext<Inline_table_data_rowContext>(i);
		}
		public Inline_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterInline_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitInline_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_tableContext inline_table() {
		Inline_tableContext _localctx = new Inline_tableContext(Context, State);
		EnterRule(_localctx, 34, RULE_inline_table);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(INLINE_TABLE_BEGIN_END_SEP);
			State = 254;
			inline_table_header();
			State = 255;
			inline_table_header_separator();
			State = 257;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 256;
					inline_table_data_row();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 261;
			Match(INLINE_TABLE_BEGIN_END_SEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_table_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(NeobemParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(NeobemParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INLINE_TABLE_COL_SEP() { return GetTokens(NeobemParser.INLINE_TABLE_COL_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_TABLE_COL_SEP(int i) {
			return GetToken(NeobemParser.INLINE_TABLE_COL_SEP, i);
		}
		public Inline_table_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_table_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterInline_table_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitInline_table_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_table_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_table_headerContext inline_table_header() {
		Inline_table_headerContext _localctx = new Inline_table_headerContext(Context, State);
		EnterRule(_localctx, 36, RULE_inline_table_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(STRING);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INLINE_TABLE_COL_SEP) {
				{
				{
				State = 264;
				Match(INLINE_TABLE_COL_SEP);
				State = 265;
				Match(STRING);
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_table_header_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INLINE_TABLE_BEGIN_END_SEP() { return GetTokens(NeobemParser.INLINE_TABLE_BEGIN_END_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_TABLE_BEGIN_END_SEP(int i) {
			return GetToken(NeobemParser.INLINE_TABLE_BEGIN_END_SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INLINE_TABLE_COL_SEP() { return GetTokens(NeobemParser.INLINE_TABLE_COL_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_TABLE_COL_SEP(int i) {
			return GetToken(NeobemParser.INLINE_TABLE_COL_SEP, i);
		}
		public Inline_table_header_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_table_header_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterInline_table_header_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitInline_table_header_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_table_header_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_table_header_separatorContext inline_table_header_separator() {
		Inline_table_header_separatorContext _localctx = new Inline_table_header_separatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_inline_table_header_separator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(INLINE_TABLE_BEGIN_END_SEP);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INLINE_TABLE_COL_SEP) {
				{
				{
				State = 272;
				Match(INLINE_TABLE_COL_SEP);
				State = 273;
				Match(INLINE_TABLE_BEGIN_END_SEP);
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_table_data_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INLINE_TABLE_COL_SEP() { return GetTokens(NeobemParser.INLINE_TABLE_COL_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_TABLE_COL_SEP(int i) {
			return GetToken(NeobemParser.INLINE_TABLE_COL_SEP, i);
		}
		public Inline_table_data_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_table_data_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterInline_table_data_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitInline_table_data_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_table_data_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_table_data_rowContext inline_table_data_row() {
		Inline_table_data_rowContext _localctx = new Inline_table_data_rowContext(Context, State);
		EnterRule(_localctx, 40, RULE_inline_table_data_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression(0);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INLINE_TABLE_COL_SEP) {
				{
				{
				State = 280;
				Match(INLINE_TABLE_COL_SEP);
				State = 281;
				expression(0);
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
	 
		public Function_statementContext() { }
		public virtual void CopyFrom(Function_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDoe2ObjectDeclarationContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Doe2objectContext doe2object() {
			return GetRuleContext<Doe2objectContext>(0);
		}
		public FunctionDoe2ObjectDeclarationContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionDoe2ObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionDoe2ObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDoe2ObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionPrintStatementContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Print_statmentContext print_statment() {
			return GetRuleContext<Print_statmentContext>(0);
		}
		public FunctionPrintStatementContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionIdfCommentContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(NeobemParser.COMMENT, 0); }
		public FunctionIdfCommentContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionIdfComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionIdfComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIdfComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public ReturnStatementContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionObjectDeclarationContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public FunctionObjectDeclarationContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionLogStatementContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Log_statementContext log_statement() {
			return GetRuleContext<Log_statementContext>(0);
		}
		public FunctionLogStatementContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionLogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionLogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionLogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionVariableDeclarationContext : Function_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public FunctionVariableDeclarationContext(Function_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterFunctionVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitFunctionVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_statement);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new FunctionIdfCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				Match(COMMENT);
				}
				break;
			case OBJECT_TYPE:
				_localctx = new FunctionObjectDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				@object();
				}
				break;
			case DOE2IDENTIFIER:
			case DOE2STRING_UNAME:
				_localctx = new FunctionDoe2ObjectDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				doe2object();
				}
				break;
			case IDENTIFIER:
				_localctx = new FunctionVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 290;
				variable_declaration();
				}
				break;
			case PRINT:
				_localctx = new FunctionPrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 291;
				print_statment();
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 292;
				return_statement();
				}
				break;
			case LOG:
				_localctx = new FunctionLogStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 293;
				log_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_idfContext : ParserRuleContext {
		public Base_idfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_idf; } }
	 
		public Base_idfContext() { }
		public virtual void CopyFrom(Base_idfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ObjectDeclarationContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectDeclarationContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatmentContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Print_statmentContext print_statment() {
			return GetRuleContext<Print_statmentContext>(0);
		}
		public PrintStatmentContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterPrintStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitPrintStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdfCommentContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(NeobemParser.COMMENT, 0); }
		public IdfCommentContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIdfComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIdfComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdfComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Doe2CommentContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2COMMENT() { return GetToken(NeobemParser.DOE2COMMENT, 0); }
		public Doe2CommentContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2Comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2Comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2Comment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogStatementContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Log_statementContext log_statement() {
			return GetRuleContext<Log_statementContext>(0);
		}
		public LogStatementContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public VariableDeclarationContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportStatementContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext import_statement() {
			return GetRuleContext<Import_statementContext>(0);
		}
		public ImportStatementContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportStatmentContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Export_statementContext export_statement() {
			return GetRuleContext<Export_statementContext>(0);
		}
		public ExportStatmentContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterExportStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitExportStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportStatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Doe2ObjectDeclarationContext : Base_idfContext {
		[System.Diagnostics.DebuggerNonUserCode] public Doe2objectContext doe2object() {
			return GetRuleContext<Doe2objectContext>(0);
		}
		public Doe2ObjectDeclarationContext(Base_idfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2ObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2ObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2ObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_idfContext base_idf() {
		Base_idfContext _localctx = new Base_idfContext(Context, State);
		EnterRule(_localctx, 44, RULE_base_idf);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new IdfCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				Match(COMMENT);
				}
				break;
			case DOE2COMMENT:
				_localctx = new Doe2CommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				Match(DOE2COMMENT);
				}
				break;
			case OBJECT_TYPE:
				_localctx = new ObjectDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 298;
				@object();
				}
				break;
			case DOE2IDENTIFIER:
			case DOE2STRING_UNAME:
				_localctx = new Doe2ObjectDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 299;
				doe2object();
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 300;
				variable_declaration();
				}
				break;
			case IMPORT:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 301;
				import_statement();
				}
				break;
			case EXPORT:
				_localctx = new ExportStatmentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 302;
				export_statement();
				}
				break;
			case PRINT:
				_localctx = new PrintStatmentContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 303;
				print_statment();
				}
				break;
			case LOG:
				_localctx = new LogStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 304;
				log_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(NeobemParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NeobemParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NeobemParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(NeobemParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(NeobemParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NeobemParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_expressionContext let_expression() {
			return GetRuleContext<Let_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NeobemParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NeobemParser.COMMA, i);
		}
		public Let_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLet_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLet_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_bindingContext let_binding() {
		Let_bindingContext _localctx = new Let_bindingContext(Context, State);
		EnterRule(_localctx, 46, RULE_let_binding);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(LET);
			State = 308;
			Match(IDENTIFIER);
			State = 309;
			Match(EQUALS);
			State = 310;
			expression(0);
			State = 317;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 311;
					Match(COMMA);
					State = 312;
					Match(IDENTIFIER);
					State = 313;
					Match(EQUALS);
					State = 314;
					expression(0);
					}
					} 
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 320;
				Match(COMMA);
				}
			}

			State = 323;
			Match(IN);
			State = 324;
			let_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterLet_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitLet_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_expressionContext let_expression() {
		Let_expressionContext _localctx = new Let_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_let_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_TYPE() { return GetToken(NeobemParser.OBJECT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_TERMINATOR() { return GetToken(NeobemParser.OBJECT_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OBJECT_COMMENT() { return GetTokens(NeobemParser.OBJECT_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_COMMENT(int i) {
			return GetToken(NeobemParser.OBJECT_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FIELD_SEP() { return GetTokens(NeobemParser.FIELD_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_SEP(int i) {
			return GetToken(NeobemParser.FIELD_SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FIELD() { return GetTokens(NeobemParser.FIELD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD(int i) {
			return GetToken(NeobemParser.FIELD, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 50, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(OBJECT_TYPE);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OBJECT_COMMENT) {
				{
				State = 329;
				Match(OBJECT_COMMENT);
				}
			}

			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 332;
				Match(FIELD_SEP);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OBJECT_COMMENT) {
					{
					State = 333;
					Match(OBJECT_COMMENT);
					}
				}

				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FIELD) {
					{
					State = 336;
					Match(FIELD);
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OBJECT_COMMENT) {
						{
						State = 337;
						Match(OBJECT_COMMENT);
						}
					}

					}
				}

				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FIELD_SEP );
			State = 346;
			Match(OBJECT_TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Doe2objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_TERMINATOR() { return GetToken(NeobemParser.DOE2_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2IDENTIFIER() { return GetToken(NeobemParser.DOE2IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2STRING_UNAME() { return GetToken(NeobemParser.DOE2STRING_UNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Doe2wordContext[] doe2word() {
			return GetRuleContexts<Doe2wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Doe2wordContext doe2word(int i) {
			return GetRuleContext<Doe2wordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOE2_OBJECT_COMMENT() { return GetTokens(NeobemParser.DOE2_OBJECT_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_OBJECT_COMMENT(int i) {
			return GetToken(NeobemParser.DOE2_OBJECT_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOE2_FIELD_SEP() { return GetTokens(NeobemParser.DOE2_FIELD_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_FIELD_SEP(int i) {
			return GetToken(NeobemParser.DOE2_FIELD_SEP, i);
		}
		public Doe2objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doe2object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Doe2objectContext doe2object() {
		Doe2objectContext _localctx = new Doe2objectContext(Context, State);
		EnterRule(_localctx, 52, RULE_doe2object);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(_la==DOE2IDENTIFIER || _la==DOE2STRING_UNAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 349;
						_la = TokenStream.LA(1);
						if ( !(_la==DOE2_OBJECT_COMMENT || _la==DOE2_FIELD_SEP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 352;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DOE2_OBJECT_COMMENT || _la==DOE2_FIELD_SEP );
					State = 354;
					doe2word();
					}
					} 
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 360;
				_la = TokenStream.LA(1);
				if ( !(_la==DOE2_OBJECT_COMMENT || _la==DOE2_FIELD_SEP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOE2_OBJECT_COMMENT || _la==DOE2_FIELD_SEP );
			State = 365;
			Match(DOE2_TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Doe2wordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_FIELD() { return GetToken(NeobemParser.DOE2_FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_STRING() { return GetToken(NeobemParser.DOE2_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_LITERAL() { return GetToken(NeobemParser.DOE2_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Doe2listContext doe2list() {
			return GetRuleContext<Doe2listContext>(0);
		}
		public Doe2wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doe2word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2word(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2word(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2word(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Doe2wordContext doe2word() {
		Doe2wordContext _localctx = new Doe2wordContext(Context, State);
		EnterRule(_localctx, 54, RULE_doe2word);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOE2_FIELD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				Match(DOE2_FIELD);
				}
				break;
			case DOE2_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(DOE2_STRING);
				}
				break;
			case DOE2_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 369;
				Match(DOE2_LITERAL);
				}
				break;
			case DOE2_LIST_START:
				EnterOuterAlt(_localctx, 4);
				{
				State = 370;
				doe2list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Doe2_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_FIELD() { return GetToken(NeobemParser.DOE2_FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_STRING() { return GetToken(NeobemParser.DOE2_STRING, 0); }
		public Doe2_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doe2_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Doe2_list_itemContext doe2_list_item() {
		Doe2_list_itemContext _localctx = new Doe2_list_itemContext(Context, State);
		EnterRule(_localctx, 56, RULE_doe2_list_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_la = TokenStream.LA(1);
			if ( !(_la==DOE2_STRING || _la==DOE2_FIELD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Doe2listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_LIST_START() { return GetToken(NeobemParser.DOE2_LIST_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Doe2_list_itemContext[] doe2_list_item() {
			return GetRuleContexts<Doe2_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Doe2_list_itemContext doe2_list_item(int i) {
			return GetRuleContext<Doe2_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_LIST_END() { return GetToken(NeobemParser.DOE2_LIST_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOE2_FIELD_SEP() { return GetTokens(NeobemParser.DOE2_FIELD_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOE2_FIELD_SEP(int i) {
			return GetToken(NeobemParser.DOE2_FIELD_SEP, i);
		}
		public Doe2listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doe2list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterDoe2list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitDoe2list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoe2list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Doe2listContext doe2list() {
		Doe2listContext _localctx = new Doe2listContext(Context, State);
		EnterRule(_localctx, 58, RULE_doe2list);
		int _la;
		try {
			int _alt;
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				Match(DOE2_LIST_START);
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOE2_FIELD_SEP) {
					{
					State = 376;
					Match(DOE2_FIELD_SEP);
					}
				}

				State = 379;
				doe2_list_item();
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 380;
						Match(DOE2_FIELD_SEP);
						State = 381;
						doe2_list_item();
						}
						} 
					}
					State = 386;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOE2_FIELD_SEP) {
					{
					State = 387;
					Match(DOE2_FIELD_SEP);
					}
				}

				State = 390;
				Match(DOE2_LIST_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				Match(DOE2_LIST_START);
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOE2_FIELD_SEP) {
					{
					State = 393;
					Match(DOE2_FIELD_SEP);
					}
				}

				State = 396;
				Match(DOE2_LIST_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NeobemParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Base_idfContext[] base_idf() {
			return GetRuleContexts<Base_idfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_idfContext base_idf(int i) {
			return GetRuleContext<Base_idfContext>(i);
		}
		public IdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.EnterIdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INeobemParserListener typedListener = listener as INeobemParserListener;
			if (typedListener != null) typedListener.ExitIdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INeobemParserVisitor<TResult> typedVisitor = visitor as INeobemParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdfContext idf() {
		IdfContext _localctx = new IdfContext(Context, State);
		EnterRule(_localctx, 60, RULE_idf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 128071175069761536L) != 0) {
				{
				{
				State = 399;
				base_idf();
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 405;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 23);
		case 1: return Precpred(Context, 22);
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 21);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,70,408,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,86,8,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,5,1,116,8,1,10,1,12,1,119,9,1,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,5,3,129,8,3,10,3,12,3,132,9,3,1,3,1,3,3,3,136,8,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,151,8,7,10,7,12,7,
		154,9,7,1,7,1,7,1,7,5,7,159,8,7,10,7,12,7,162,9,7,3,7,164,8,7,1,7,1,7,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,175,8,9,10,9,12,9,178,9,9,1,9,3,9,181,
		8,9,1,9,1,9,1,9,1,9,3,9,187,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,11,5,11,199,8,11,10,11,12,11,202,9,11,1,11,3,11,205,8,11,1,11,1,
		11,3,11,209,8,11,1,12,1,12,1,12,5,12,214,8,12,10,12,12,12,217,9,12,1,13,
		1,13,1,13,1,13,1,13,4,13,224,8,13,11,13,12,13,225,1,13,1,13,1,13,1,13,
		4,13,232,8,13,11,13,12,13,233,1,13,3,13,237,8,13,1,14,1,14,1,14,4,14,242,
		8,14,11,14,12,14,243,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,4,17,258,8,17,11,17,12,17,259,1,17,1,17,1,18,1,18,1,18,5,18,
		267,8,18,10,18,12,18,270,9,18,1,19,1,19,1,19,5,19,275,8,19,10,19,12,19,
		278,9,19,1,20,1,20,1,20,5,20,283,8,20,10,20,12,20,286,9,20,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,3,21,295,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,3,22,306,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,316,
		8,23,10,23,12,23,319,9,23,1,23,3,23,322,8,23,1,23,1,23,1,23,1,24,1,24,
		1,25,1,25,3,25,331,8,25,1,25,1,25,3,25,335,8,25,1,25,1,25,3,25,339,8,25,
		3,25,341,8,25,4,25,343,8,25,11,25,12,25,344,1,25,1,25,1,26,1,26,4,26,351,
		8,26,11,26,12,26,352,1,26,5,26,356,8,26,10,26,12,26,359,9,26,1,26,4,26,
		362,8,26,11,26,12,26,363,1,26,1,26,1,27,1,27,1,27,1,27,3,27,372,8,27,1,
		28,1,28,1,29,1,29,3,29,378,8,29,1,29,1,29,1,29,5,29,383,8,29,10,29,12,
		29,386,9,29,1,29,3,29,389,8,29,1,29,1,29,1,29,1,29,3,29,395,8,29,1,29,
		3,29,398,8,29,1,30,5,30,401,8,30,10,30,12,30,404,9,30,1,30,1,30,1,30,0,
		1,2,31,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,0,8,1,0,5,6,1,0,7,8,1,0,18,19,1,0,15,17,1,0,9,
		14,1,0,55,56,2,0,65,65,69,69,2,0,66,66,70,70,452,0,62,1,0,0,0,2,85,1,0,
		0,0,4,120,1,0,0,0,6,135,1,0,0,0,8,137,1,0,0,0,10,139,1,0,0,0,12,141,1,
		0,0,0,14,148,1,0,0,0,16,167,1,0,0,0,18,186,1,0,0,0,20,188,1,0,0,0,22,208,
		1,0,0,0,24,210,1,0,0,0,26,236,1,0,0,0,28,238,1,0,0,0,30,247,1,0,0,0,32,
		250,1,0,0,0,34,253,1,0,0,0,36,263,1,0,0,0,38,271,1,0,0,0,40,279,1,0,0,
		0,42,294,1,0,0,0,44,305,1,0,0,0,46,307,1,0,0,0,48,326,1,0,0,0,50,328,1,
		0,0,0,52,348,1,0,0,0,54,371,1,0,0,0,56,373,1,0,0,0,58,397,1,0,0,0,60,402,
		1,0,0,0,62,63,5,48,0,0,63,64,5,1,0,0,64,65,3,2,1,0,65,1,1,0,0,0,66,67,
		6,1,-1,0,67,86,5,53,0,0,68,86,5,56,0,0,69,86,5,52,0,0,70,86,5,46,0,0,71,
		86,5,47,0,0,72,86,5,48,0,0,73,74,5,42,0,0,74,86,5,43,0,0,75,86,3,22,11,
		0,76,86,3,12,6,0,77,86,3,18,9,0,78,86,3,14,7,0,79,86,3,46,23,0,80,86,3,
		34,17,0,81,82,5,2,0,0,82,83,3,2,1,0,83,84,5,3,0,0,84,86,1,0,0,0,85,66,
		1,0,0,0,85,68,1,0,0,0,85,69,1,0,0,0,85,70,1,0,0,0,85,71,1,0,0,0,85,72,
		1,0,0,0,85,73,1,0,0,0,85,75,1,0,0,0,85,76,1,0,0,0,85,77,1,0,0,0,85,78,
		1,0,0,0,85,79,1,0,0,0,85,80,1,0,0,0,85,81,1,0,0,0,86,117,1,0,0,0,87,88,
		10,23,0,0,88,89,5,39,0,0,89,116,3,2,1,24,90,91,10,22,0,0,91,92,5,38,0,
		0,92,116,3,2,1,23,93,94,10,20,0,0,94,95,3,4,2,0,95,96,3,2,1,21,96,116,
		1,0,0,0,97,98,10,19,0,0,98,99,5,4,0,0,99,116,3,2,1,19,100,101,10,18,0,
		0,101,102,7,0,0,0,102,116,3,2,1,19,103,104,10,17,0,0,104,105,7,1,0,0,105,
		116,3,2,1,18,106,107,10,16,0,0,107,108,3,10,5,0,108,109,3,2,1,17,109,116,
		1,0,0,0,110,111,10,15,0,0,111,112,7,2,0,0,112,116,3,2,1,16,113,114,10,
		21,0,0,114,116,3,6,3,0,115,87,1,0,0,0,115,90,1,0,0,0,115,93,1,0,0,0,115,
		97,1,0,0,0,115,100,1,0,0,0,115,103,1,0,0,0,115,106,1,0,0,0,115,110,1,0,
		0,0,115,113,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,
		3,1,0,0,0,119,117,1,0,0,0,120,121,7,3,0,0,121,5,1,0,0,0,122,123,5,2,0,
		0,123,136,5,3,0,0,124,125,5,2,0,0,125,130,3,8,4,0,126,127,5,41,0,0,127,
		129,3,8,4,0,128,126,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,
		0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,3,0,0,134,136,1,0,0,0,
		135,122,1,0,0,0,135,124,1,0,0,0,136,7,1,0,0,0,137,138,3,2,1,0,138,9,1,
		0,0,0,139,140,7,4,0,0,140,11,1,0,0,0,141,142,5,20,0,0,142,143,3,2,1,0,
		143,144,5,21,0,0,144,145,3,2,1,0,145,146,5,22,0,0,146,147,3,2,1,0,147,
		13,1,0,0,0,148,152,5,23,0,0,149,151,5,48,0,0,150,149,1,0,0,0,151,154,1,
		0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,
		155,163,5,24,0,0,156,164,3,2,1,0,157,159,3,42,21,0,158,157,1,0,0,0,159,
		162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,164,1,0,0,0,162,160,1,
		0,0,0,163,156,1,0,0,0,163,160,1,0,0,0,164,165,1,0,0,0,165,166,5,25,0,0,
		166,15,1,0,0,0,167,168,5,26,0,0,168,169,3,2,1,0,169,17,1,0,0,0,170,171,
		5,24,0,0,171,176,3,20,10,0,172,173,5,41,0,0,173,175,3,20,10,0,174,172,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,
		0,178,176,1,0,0,0,179,181,5,41,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,
		182,1,0,0,0,182,183,5,25,0,0,183,187,1,0,0,0,184,185,5,24,0,0,185,187,
		5,25,0,0,186,170,1,0,0,0,186,184,1,0,0,0,187,19,1,0,0,0,188,189,3,2,1,
		0,189,190,5,40,0,0,190,191,3,2,1,0,191,21,1,0,0,0,192,193,5,27,0,0,193,
		209,5,28,0,0,194,195,5,27,0,0,195,200,3,2,1,0,196,197,5,41,0,0,197,199,
		3,2,1,0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,
		0,201,204,1,0,0,0,202,200,1,0,0,0,203,205,5,41,0,0,204,203,1,0,0,0,204,
		205,1,0,0,0,205,206,1,0,0,0,206,207,5,28,0,0,207,209,1,0,0,0,208,192,1,
		0,0,0,208,194,1,0,0,0,209,23,1,0,0,0,210,211,5,29,0,0,211,215,3,2,1,0,
		212,214,3,26,13,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,
		216,1,0,0,0,216,25,1,0,0,0,217,215,1,0,0,0,218,219,5,30,0,0,219,237,5,
		48,0,0,220,221,5,31,0,0,221,223,5,2,0,0,222,224,5,48,0,0,223,222,1,0,0,
		0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,
		237,5,3,0,0,228,229,5,32,0,0,229,231,5,2,0,0,230,232,5,48,0,0,231,230,
		1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,
		0,235,237,5,3,0,0,236,218,1,0,0,0,236,220,1,0,0,0,236,228,1,0,0,0,237,
		27,1,0,0,0,238,239,5,33,0,0,239,241,5,2,0,0,240,242,5,48,0,0,241,240,1,
		0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,
		245,246,5,3,0,0,246,29,1,0,0,0,247,248,5,34,0,0,248,249,3,2,1,0,249,31,
		1,0,0,0,250,251,5,35,0,0,251,252,3,2,1,0,252,33,1,0,0,0,253,254,5,44,0,
		0,254,255,3,36,18,0,255,257,3,38,19,0,256,258,3,40,20,0,257,256,1,0,0,
		0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,
		262,5,44,0,0,262,35,1,0,0,0,263,268,5,53,0,0,264,265,5,45,0,0,265,267,
		5,53,0,0,266,264,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,
		0,269,37,1,0,0,0,270,268,1,0,0,0,271,276,5,44,0,0,272,273,5,45,0,0,273,
		275,5,44,0,0,274,272,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,
		0,0,0,277,39,1,0,0,0,278,276,1,0,0,0,279,284,3,2,1,0,280,281,5,45,0,0,
		281,283,3,2,1,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,
		1,0,0,0,285,41,1,0,0,0,286,284,1,0,0,0,287,295,5,49,0,0,288,295,3,50,25,
		0,289,295,3,52,26,0,290,295,3,0,0,0,291,295,3,30,15,0,292,295,3,16,8,0,
		293,295,3,32,16,0,294,287,1,0,0,0,294,288,1,0,0,0,294,289,1,0,0,0,294,
		290,1,0,0,0,294,291,1,0,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,43,1,0,
		0,0,296,306,5,49,0,0,297,306,5,50,0,0,298,306,3,50,25,0,299,306,3,52,26,
		0,300,306,3,0,0,0,301,306,3,24,12,0,302,306,3,28,14,0,303,306,3,30,15,
		0,304,306,3,32,16,0,305,296,1,0,0,0,305,297,1,0,0,0,305,298,1,0,0,0,305,
		299,1,0,0,0,305,300,1,0,0,0,305,301,1,0,0,0,305,302,1,0,0,0,305,303,1,
		0,0,0,305,304,1,0,0,0,306,45,1,0,0,0,307,308,5,36,0,0,308,309,5,48,0,0,
		309,310,5,1,0,0,310,317,3,2,1,0,311,312,5,41,0,0,312,313,5,48,0,0,313,
		314,5,1,0,0,314,316,3,2,1,0,315,311,1,0,0,0,316,319,1,0,0,0,317,315,1,
		0,0,0,317,318,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,320,322,5,41,0,0,
		321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,37,0,0,324,325,
		3,48,24,0,325,47,1,0,0,0,326,327,3,2,1,0,327,49,1,0,0,0,328,330,5,54,0,
		0,329,331,5,60,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,342,1,0,0,0,332,
		334,5,59,0,0,333,335,5,60,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,340,
		1,0,0,0,336,338,5,58,0,0,337,339,5,60,0,0,338,337,1,0,0,0,338,339,1,0,
		0,0,339,341,1,0,0,0,340,336,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,
		332,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,346,1,
		0,0,0,346,347,5,61,0,0,347,51,1,0,0,0,348,357,7,5,0,0,349,351,7,6,0,0,
		350,349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,
		1,0,0,0,354,356,3,54,27,0,355,350,1,0,0,0,356,359,1,0,0,0,357,355,1,0,
		0,0,357,358,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,360,362,7,6,0,0,361,
		360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,365,1,
		0,0,0,365,366,5,68,0,0,366,53,1,0,0,0,367,372,5,70,0,0,368,372,5,66,0,
		0,369,372,5,67,0,0,370,372,3,58,29,0,371,367,1,0,0,0,371,368,1,0,0,0,371,
		369,1,0,0,0,371,370,1,0,0,0,372,55,1,0,0,0,373,374,7,7,0,0,374,57,1,0,
		0,0,375,377,5,63,0,0,376,378,5,69,0,0,377,376,1,0,0,0,377,378,1,0,0,0,
		378,379,1,0,0,0,379,384,3,56,28,0,380,381,5,69,0,0,381,383,3,56,28,0,382,
		380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,388,1,
		0,0,0,386,384,1,0,0,0,387,389,5,69,0,0,388,387,1,0,0,0,388,389,1,0,0,0,
		389,390,1,0,0,0,390,391,5,64,0,0,391,398,1,0,0,0,392,394,5,63,0,0,393,
		395,5,69,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,398,5,
		64,0,0,397,375,1,0,0,0,397,392,1,0,0,0,398,59,1,0,0,0,399,401,3,44,22,
		0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,
		405,1,0,0,0,404,402,1,0,0,0,405,406,5,0,0,1,406,61,1,0,0,0,42,85,115,117,
		130,135,152,160,163,176,180,186,200,204,208,215,225,233,236,243,259,268,
		276,284,294,305,317,321,330,334,338,340,344,352,357,363,371,377,384,388,
		394,397,402
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
