//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Idf.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IdfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, FIELDSEP=2, TERMINATOR=3, IDFFIELD=4, WS=5;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "FIELDSEP", "TERMINATOR", "IDFFIELD", "WS"
	};


	public IdfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public IdfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "FIELDSEP", "TERMINATOR", "IDFFIELD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IdfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,5,43,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,5,0,14,8,
		0,10,0,12,0,17,9,0,1,0,3,0,20,8,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,5,3,32,8,3,10,3,12,3,35,9,3,1,4,4,4,38,8,4,11,4,12,4,39,1,4,1,4,1,
		15,0,5,1,1,3,2,5,3,7,4,9,5,1,0,3,5,0,9,10,13,13,32,33,44,44,59,59,5,0,
		10,10,13,13,33,33,44,44,59,59,3,0,9,10,13,13,32,32,46,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,1,11,1,0,0,0,3,25,1,0,0,0,
		5,27,1,0,0,0,7,29,1,0,0,0,9,37,1,0,0,0,11,15,5,33,0,0,12,14,9,0,0,0,13,
		12,1,0,0,0,14,17,1,0,0,0,15,16,1,0,0,0,15,13,1,0,0,0,16,19,1,0,0,0,17,
		15,1,0,0,0,18,20,5,13,0,0,19,18,1,0,0,0,19,20,1,0,0,0,20,21,1,0,0,0,21,
		22,5,10,0,0,22,23,1,0,0,0,23,24,6,0,0,0,24,2,1,0,0,0,25,26,5,44,0,0,26,
		4,1,0,0,0,27,28,5,59,0,0,28,6,1,0,0,0,29,33,8,0,0,0,30,32,8,1,0,0,31,30,
		1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,8,1,0,0,0,35,33,1,
		0,0,0,36,38,7,2,0,0,37,36,1,0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,
		0,0,0,40,41,1,0,0,0,41,42,6,4,0,0,42,10,1,0,0,0,5,0,15,19,33,39,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
